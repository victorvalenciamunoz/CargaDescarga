@page "/"

@using Blazicons
@using Blazorise.LottieAnimation
@using CargaDescarga.Components.OpenStreetMap
@using CargaDescarga.Components.Pois
@using CargaDescarga.OpenStreetMap
@using CargaDescarga.Pois
@using Microsoft.FluentUI.AspNetCore.Components

@inject IJSRuntime JsRuntime
@inject IDialogService dialogService
@inject IGeolocation Geolocation
@inject PoiService PoiService
<style>
    .leaflet-bottom{
        z-index:500!important;
    }
</style>
<div class="d-flex flex-column" style="height:100%">
    <div id="map" class="flex-fill" style="color:black; height:100%">
        @if (_isBusy)
        {
            <LottieAnimation Path="/animations/ball_loader.json" Style="height: 250px;" Loop="true" />
        }
    </div>
    <div class="col-12 d-flex flex-row" style="height:80px; ">
        <div class="footer-menu-item flex-grow-1 d-flex flex-column justify-content-center align-items-center" @onclick="SetMapUserLocation">
            Mi posición
            <div style="font-size: 200%;">
                <Blazicon Svg="FluentUiIcon.Location"></Blazicon>
            </div>
        </div>
        <div class="footer-menu-item flex-grow-1 d-flex flex-column justify-content-center align-items-center" @onclick="OpenSearchAsync">
            Búsqueda
            <div style="font-size: 200%;">
                <Blazicon Svg="FluentUiIcon.GlobeSearch"></Blazicon>
            </div>
        </div>
        <div class="footer-menu-item flex-grow-1 d-flex flex-column justify-content-center align-items-center" @onclick="OpenContribute">
            Contribuir
            <div style="font-size: 200%;">
                <Blazicon Svg="FluentUiIcon.PeopleTeam"></Blazicon>
            </div>
        </div>
    </div>

</div>

@code {

    private IJSObjectReference _jsModule;

    private List<PuntoDeInteres> _pois = new List<PuntoDeInteres>();
    (double Latitude, double Longitude)? currentLocation;

    private bool _isBusy = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {            
            _jsModule = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./Components/Pages/Home.razor.js");
            await _jsModule.InvokeVoidAsync("initializeMap", DotNetObjectReference.Create(this));
        }
    }

    [JSInvokable]
    public async Task MarkerClicked(double latitude, double longitude)
    {       
        if (_pois.Any())
        {
            var data = _pois.FirstOrDefault(p => p.Latitud == latitude && p.Longitud == longitude);
            var dialog = await dialogService.ShowDialogAsync<PoiInfoDetailDialog>(data, new DialogParameters()
                {
                    Title = $"Detalle de la ubicación",
                    PreventDismissOnOverlayClick = true,
                    PreventScroll = true,
                });
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await SetMapUserLocation();
    }  

    private async Task SetMapUserLocation()
    {
        currentLocation = await GetLocationAsync();
        await InitMap();
    }
    
    private async Task InitMap()
    {
        await CenterUserPositionAsync();
        if (currentLocation is not null)
        {
            _pois = (await GetPoisAsync(currentLocation.Value.Latitude, currentLocation.Value.Longitude)).ToList();
            await AddMarkersToMapAsync(_pois.ToList(), (currentLocation.Value.Latitude, currentLocation.Value.Longitude));
        }
    }

    private async Task<IEnumerable<PuntoDeInteres>> GetPoisAsync(double latitude, double longitude)
    {
        return await PoiService.GetPoisAsync(latitude, longitude, 0, 0);
    }    

    private async Task AddMarkersToMapAsync(List<PuntoDeInteres> pois, (double latitud, double longitud) refPosition)
    {
        var positions = pois.Select(poi => new { lat = poi.Latitud, lon = poi.Longitud }).ToList();

        await _jsModule.InvokeVoidAsync("ClearMarkers");
        await _jsModule.InvokeVoidAsync("AddCurrentUserLocationMarker", refPosition.latitud, refPosition.longitud);
        await _jsModule.InvokeVoidAsync("AddMarkers", positions);
    }

    private async Task<(double Latitude, double Longitude)?> GetLocationAsync()
    {
        try
        {
            var request = new GeolocationRequest(GeolocationAccuracy.Medium);
            var location = await Geolocation.GetLocationAsync(request);
            if (location != null)
            {
                Console.WriteLine($"Latitude: {location.Latitude}, Longitude: {location.Longitude}");
                return (location.Latitude, location.Longitude);
            }
        }
        catch (Exception ex)
        {
            // Manejar errores aquí
            Console.WriteLine($"Error: {ex.Message}");
        }

        return null;
    }

    private async Task CenterUserPositionAsync()
    {
        _isBusy = true;
            
        if (currentLocation.HasValue)
        {
            await _jsModule.InvokeVoidAsync("AddCurrentUserLocationMarker", currentLocation.Value.Latitude, currentLocation.Value.Longitude);
        }
        _isBusy = false;
    }

    private async Task OpenSearchAsync(MouseEventArgs e)
    {
        var data = new CustomPlace();
        var dialog = await dialogService.ShowDialogAsync<SearchAddressDialog>(data, new DialogParameters()
            {
                Title = $"Buscar dirección",
                PreventDismissOnOverlayClick = true,
                PreventScroll = true,
            });

        var result = await dialog.Result;
        if (!result.Cancelled && result.Data is not null)
        {
            _isBusy = true;
            var resultData = ((CustomPlace)result.Data);
            currentLocation = ((double)resultData.Latitude, (double)resultData.Longitude);  
            await InitMap();
            _isBusy = false;
        }
    }

    private async Task OpenContribute()
    {
        await Browser.OpenAsync("https://sycapps.net/contactform", BrowserLaunchMode.SystemPreferred);
    }
}